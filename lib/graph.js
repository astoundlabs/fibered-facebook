// Generated by CoffeeScript 1.3.3
(function() {
  var https;

  https = require('fibered-http');

  this.exports.Graph = (function() {

    function Graph(token) {
      this.token = token;
    }

    Graph.prototype.get = function(path, options) {
      var json, query, res;
      if (options == null) {
        options = {};
      }
      query = options.query || {};
      query.access_token = this.token;
      res = https.request({
        protocol: 'https',
        hostname: 'graph.facebook.com',
        path: this.path,
        query: query,
        timeout: options.timeout
      });
      json = null;
      try {
        json = JSON.parse(res.body);
      } catch (e) {
        throw new Error("Unable to parse result of facebook graph call - " + (e.toString()));
      }
      if (json.error) {
        throw new Error("Facebook Graph Error: " + json.error.message);
      }
      return json;
    };

    Graph.prototype.quickGet = function(path, options) {
      var crawl, defaults, i, page, state, _i, _j, _ref, _results, _results1;
      if (options == null) {
        options = {};
      }
      defaults = {
        perPage: 50,
        concurrency: 5
      };
      options = _.extend({}, defaults, options);
      page = 0;
      crawl = !options.pages;
      state = {
        finished: [],
        pending: (function() {
          _results = [];
          for (var _i = 0; 0 <= pages ? _i <= pages : _i >= pages; 0 <= pages ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this)
      };
      _results1 = [];
      for (i = _j = 0, _ref = options.concurrency; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        _results1.push((function(i) {
          var _this = this;
          return Fiber(function() {
            var json;
            return json = _this.get(path, _.extend({}, options, {
              offset: i * options.perPage,
              limit: options.perPage
            }));
          });
        })(i));
      }
      return _results1;
    };

    Graph.prototype.redundantGet = function() {};

    return Graph;

  })();

}).call(this);
